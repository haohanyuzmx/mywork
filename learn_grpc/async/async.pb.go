// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.3.0
// source: async.proto

package protol

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Login    *Jwt   `protobuf:"bytes,4,opt,name=login,proto3" json:"login,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_async_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_async_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_async_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetLogin() *Jwt {
	if x != nil {
		return x.Login
	}
	return nil
}

type Ret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Ret) Reset() {
	*x = Ret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_async_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ret) ProtoMessage() {}

func (x *Ret) ProtoReflect() protoreflect.Message {
	mi := &file_async_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ret.ProtoReflect.Descriptor instead.
func (*Ret) Descriptor() ([]byte, []int) {
	return file_async_proto_rawDescGZIP(), []int{1}
}

func (x *Ret) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Jwt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Jwt) Reset() {
	*x = Jwt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_async_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jwt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jwt) ProtoMessage() {}

func (x *Jwt) ProtoReflect() protoreflect.Message {
	mi := &file_async_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jwt.ProtoReflect.Descriptor instead.
func (*Jwt) Descriptor() ([]byte, []int) {
	return file_async_proto_rawDescGZIP(), []int{2}
}

func (x *Jwt) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_async_proto protoreflect.FileDescriptor

var file_async_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x22, 0x69, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a,
	0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x2e, 0x4a, 0x77, 0x74, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x22, 0x1f, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x1b, 0x0a, 0x03, 0x4a, 0x77, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x87,
	0x01, 0x0a, 0x03, 0x57, 0x65, 0x62, 0x12, 0x2b, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6c, 0x2e, 0x4a, 0x77, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x29, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_async_proto_rawDescOnce sync.Once
	file_async_proto_rawDescData = file_async_proto_rawDesc
)

func file_async_proto_rawDescGZIP() []byte {
	file_async_proto_rawDescOnce.Do(func() {
		file_async_proto_rawDescData = protoimpl.X.CompressGZIP(file_async_proto_rawDescData)
	})
	return file_async_proto_rawDescData
}

var file_async_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_async_proto_goTypes = []interface{}{
	(*User)(nil), // 0: protol.User
	(*Ret)(nil),  // 1: protol.Ret
	(*Jwt)(nil),  // 2: protol.Jwt
}
var file_async_proto_depIdxs = []int32{
	2, // 0: protol.User.login:type_name -> protol.Jwt
	0, // 1: protol.Web.Register:input_type -> protol.User
	0, // 2: protol.Web.Login:input_type -> protol.User
	0, // 3: protol.Web.Update:input_type -> protol.User
	1, // 4: protol.Web.Register:output_type -> protol.Ret
	2, // 5: protol.Web.Login:output_type -> protol.Jwt
	1, // 6: protol.Web.Update:output_type -> protol.Ret
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_async_proto_init() }
func file_async_proto_init() {
	if File_async_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_async_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_async_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_async_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jwt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_async_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_async_proto_goTypes,
		DependencyIndexes: file_async_proto_depIdxs,
		MessageInfos:      file_async_proto_msgTypes,
	}.Build()
	File_async_proto = out.File
	file_async_proto_rawDesc = nil
	file_async_proto_goTypes = nil
	file_async_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Web_RegisterClient, error)
	Login(ctx context.Context, opts ...grpc.CallOption) (Web_LoginClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (Web_UpdateClient, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClient(cc grpc.ClientConnInterface) WebClient {
	return &webClient{cc}
}

func (c *webClient) Register(ctx context.Context, opts ...grpc.CallOption) (Web_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Web_serviceDesc.Streams[0], "/protol.Web/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &webRegisterClient{stream}
	return x, nil
}

type Web_RegisterClient interface {
	Send(*User) error
	Recv() (*Ret, error)
	grpc.ClientStream
}

type webRegisterClient struct {
	grpc.ClientStream
}

func (x *webRegisterClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webRegisterClient) Recv() (*Ret, error) {
	m := new(Ret)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webClient) Login(ctx context.Context, opts ...grpc.CallOption) (Web_LoginClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Web_serviceDesc.Streams[1], "/protol.Web/Login", opts...)
	if err != nil {
		return nil, err
	}
	x := &webLoginClient{stream}
	return x, nil
}

type Web_LoginClient interface {
	Send(*User) error
	Recv() (*Jwt, error)
	grpc.ClientStream
}

type webLoginClient struct {
	grpc.ClientStream
}

func (x *webLoginClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webLoginClient) Recv() (*Jwt, error) {
	m := new(Jwt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webClient) Update(ctx context.Context, opts ...grpc.CallOption) (Web_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Web_serviceDesc.Streams[2], "/protol.Web/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &webUpdateClient{stream}
	return x, nil
}

type Web_UpdateClient interface {
	Send(*User) error
	Recv() (*Ret, error)
	grpc.ClientStream
}

type webUpdateClient struct {
	grpc.ClientStream
}

func (x *webUpdateClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webUpdateClient) Recv() (*Ret, error) {
	m := new(Ret)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebServer is the server API for Web service.
type WebServer interface {
	Register(Web_RegisterServer) error
	Login(Web_LoginServer) error
	Update(Web_UpdateServer) error
}

// UnimplementedWebServer can be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (*UnimplementedWebServer) Register(Web_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedWebServer) Login(Web_LoginServer) error {
	return status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedWebServer) Update(Web_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterWebServer(s *grpc.Server, srv WebServer) {
	s.RegisterService(&_Web_serviceDesc, srv)
}

func _Web_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebServer).Register(&webRegisterServer{stream})
}

type Web_RegisterServer interface {
	Send(*Ret) error
	Recv() (*User, error)
	grpc.ServerStream
}

type webRegisterServer struct {
	grpc.ServerStream
}

func (x *webRegisterServer) Send(m *Ret) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webRegisterServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Web_Login_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebServer).Login(&webLoginServer{stream})
}

type Web_LoginServer interface {
	Send(*Jwt) error
	Recv() (*User, error)
	grpc.ServerStream
}

type webLoginServer struct {
	grpc.ServerStream
}

func (x *webLoginServer) Send(m *Jwt) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webLoginServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Web_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebServer).Update(&webUpdateServer{stream})
}

type Web_UpdateServer interface {
	Send(*Ret) error
	Recv() (*User, error)
	grpc.ServerStream
}

type webUpdateServer struct {
	grpc.ServerStream
}

func (x *webUpdateServer) Send(m *Ret) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webUpdateServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Web_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protol.Web",
	HandlerType: (*WebServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Web_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Login",
			Handler:       _Web_Login_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _Web_Update_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "async.proto",
}
